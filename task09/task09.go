package main

import (
	"fmt"
	"sync"
)

// Разработать конвейер чисел.
// Даны два канала: в первый пишутся числа (x) из массива, во второй — результат операции x*2,
// после чего данные из второго канала должны выводиться в stdout.

func main() {
	firstChan := make(chan int)  // Канал для чисел из массива
	secondChan := make(chan int) // Канал для квадратов чисел из массива

	array := []int{1, 2, 3, 4, 5, 6, 7, 8, 9} // Массив чисел

	var wg sync.WaitGroup // Счетчик горутин
	wg.Add(3)             // Увеличение счетчика на количество горутин

	// Запуск горутины с анонимной функцией для записи в первый канал
	go func() {
		defer wg.Done() // Отложенное уменьшение счетчика

		// Цикл по элементам массива
		for _, val := range array {
			firstChan <- val // Запись в канал
		}
		close(firstChan)
	}()

	// Запуск горутины с анонимной функцией для записи во второй канал
	go func() {
		defer wg.Done() // Отложенное уменьшение счетчика
		for val := range firstChan {
			secondChan <- val * 2 // Запись во второй канал
		}
		close(secondChan)
	}()

	// Запуск горутины с анонимной функцией для вывода значений из второго канала
	go func() {
		defer wg.Done()
		for val := range secondChan {
			fmt.Println(val)
		}
	}()

	wg.Wait() // Ожидание завершения всех горутин
}
